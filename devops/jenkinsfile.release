pipeline {
    agent any

    parameters {
        string(name: "DEV_VERSION", description: "the tag of the image to release, like `dev-6-02dbc80`")
        string(name: "PROD_VERSION", description: "the tag of the image,src to release, like `1.2.3`")
    }

    // global ENV
    // - FEISHU_ENTRYPOINT
    // - ARKIDV2DEV_PUBLIC_URL

    environment {
        IMAGE_NAME = "arkid-fe"
        GIT_TAG = "master"
        DOCKER_DEV_REGISTRY="https://harbor.longguikeji.com"
        DOCKER_DEV_REGISTRY_CREDENTIAL="devops-longguikeji-harbor"
        DOCKER_PROD_REGISTRY="https://index.docker.io/v1/"
        DOCKER_PROD_REGISTRY_CREDENTIAL="devops-longguikeji-dockerhub"

        DEV_DOCKER_IMAGE="harbor.longguikeji.com/ark-releases/arkid-fe:${params.DEV_VERSION}"
        STAGE_DOCKER_IMAGE="harbor.longguikeji.com/ark-releases/arkid-fe:${params.PROD_VERSION}"
        PROD_DOCKER_IMAGE="longguikeji/arkid-fe:${params.PROD_VERSION}"
    }
    stages {
       stage('pre') {
            steps {
                sendFEISHU("pending")
                // replacePyPIRegistry()
            }
        }
        stage("release docker image") {
            steps {
                script {
                    this_stage = env.STAGE_NAME
                }
                withDockerRegistry([credentialsId: "${DOCKER_DEV_REGISTRY_CREDENTIAL}", url: "${DOCKER_DEV_REGISTRY}"]){
                    sh """
                    docker pull ${env.DEV_DOCKER_IMAGE}
                    docker tag ${env.DEV_DOCKER_IMAGE} ${env.STAGE_DOCKER_IMAGE}
                    docker push ${env.STAGE_DOCKER_IMAGE}
                    """
                }
                withDockerRegistry([credentialsId: "${DOCKER_PROD_REGISTRY_CREDENTIAL}", url: "${DOCKER_PROD_REGISTRY}"]){
                    sh """
                    docker tag ${env.DEV_DOCKER_IMAGE} ${env.PROD_DOCKER_IMAGE}
                    docker push ${env.PROD_DOCKER_IMAGE}
                    """
                }
                echo "release docker image"
            }
        }
        // stage("release src") {
        //     steps {
        //         echo "TODO: release src"
        //     }
        // }
    }
    post {
        success {
            sendFEISHU("success")
        }
        failure {
            sendFEISHU("fail")
        }
    }
}

def sendFEISHU(status){
    if (status == "success") {
        message="构建并部署成功，点击查看部署后的效果"
        href_url="${env.ARKIDV2DEV_PUBLIC_URL}"
    } else if(status == "pending"){
        message="开始构建，点击查看构建过程"
        href_url="${env.BUILD_URL}"
    } else {
        message="${last_started}阶段失败，点击查看具体日志"
        href_url="${env.BUILD_URL}"
    }

    sh """
        curl -X POST \
        ${env.FEISHU_ENTRYPOINT} \
        -H "content-type: application/json" \
        -d \
        '{
            "msg_type": "post",
            "content": {
                "post": {
                    "zh_cn": {
                        "title": "流水线状态通知",
                        "content": [
                            [
                                {
                                    "tag": "text",
                                    "text": "${env.REPO_NAME} 项目流水线有更新: "
                                },
                                {
                                    "tag": "a",
                                    "text": "$message",
                                    "href": "$href_url"
                                }
                            ]
                        ]
                    }
                }
            }
        }'
    """
}